version: 2

# Comprehensive data quality test suite
# This file contains specific tests for common data quality issues

models:
  # Example tests for a sales table
  - name: sales
    description: "Sales data with comprehensive quality checks"
    columns:
      - name: order_id
        description: "Unique identifier for each order"
        tests:
          - not_null
          - unique
      - name: customer_id
        description: "Foreign key to customers table"
        tests:
          - not_null
          - relationships:
              to: ref('customers')
              field: customer_id
      - name: product_id
        description: "Foreign key to products table"
        tests:
          - not_null
          - relationships:
              to: ref('products')
              field: product_id
      - name: order_date
        description: "Date when the order was placed"
        tests:
          - not_null
          - not_null:
              where: "order_date >= '2020-01-01'"
      - name: order_amount
        description: "Total amount of the order"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1000000
      - name: order_status
        description: "Current status of the order"
        tests:
          - not_null
          - accepted_values:
              values: ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled']
      - name: created_at
        description: "Timestamp when record was created"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "created_at <= current_timestamp"
      - name: updated_at
        description: "Timestamp when record was last updated"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "updated_at >= created_at"

  # Example tests for a customers table
  - name: customers
    description: "Customer master data with quality checks"
    columns:
      - name: customer_id
        description: "Unique identifier for each customer"
        tests:
          - not_null
          - unique
      - name: email
        description: "Customer email address"
        tests:
          - not_null
          - unique
          - dbt_utils.expression_is_true:
              expression: "email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'"
      - name: phone
        description: "Customer phone number"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "length(phone) >= 10"
      - name: registration_date
        description: "Date when customer registered"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "registration_date <= current_date"
      - name: is_active
        description: "Whether customer account is active"
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

  # Example tests for a products table
  - name: products
    description: "Product catalog with quality checks"
    columns:
      - name: product_id
        description: "Unique identifier for each product"
        tests:
          - not_null
          - unique
      - name: product_name
        description: "Name of the product"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "length(product_name) > 0"
      - name: category
        description: "Product category"
        tests:
          - not_null
          - accepted_values:
              values: ['electronics', 'clothing', 'books', 'home', 'sports']
      - name: price
        description: "Product price"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      - name: stock_quantity
        description: "Available stock quantity"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100000

# Custom tests for business logic validation
tests:
  - name: test_sales_amount_consistency
    description: "Ensures sales amount calculations are consistent"
    test_type: custom
    config:
      store_failures: true
    test_sql: |
      select *
      from {{ ref('sales') }}
      where order_amount != (quantity * unit_price)

  - name: test_customer_lifetime_value
    description: "Validates customer lifetime value calculations"
    test_type: custom
    config:
      store_failures: true
    test_sql: |
      select *
      from {{ ref('customer_lifetime_value') }}
      where lifetime_value < 0

  - name: test_data_freshness
    description: "Ensures data is not older than 24 hours"
    test_type: custom
    config:
      store_failures: true
    test_sql: |
      select *
      from {{ ref('sales') }}
      where updated_at < current_timestamp - interval '24 hours'

